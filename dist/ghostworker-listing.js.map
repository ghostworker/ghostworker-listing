{"version":3,"file":null,"sources":["../lib/ghostworker-listing.js"],"sourcesContent":["\n/*\ndocument.addEventListener(\"DOMContentLoaded\", function(event) {\n\n    listContent( '#notes-list ul', 'ghostworker-content-v0.1' )\n});\n*/\n\n\nfunction listContent( selector, cacheName ){\n    var ul = document.querySelector(selector);\n    caches.open(cacheName).then(function(cache) {\n        cache.keys().then(function(keys) {\n            keys.forEach(function(request, index, array) {\n\n                var newRequest = request.clone();\n                window.caches.match(newRequest)\n                    .then(function(response) {\n                        if(response){\n                            var clonedResponse = response.clone();\n                            clonedResponse.text().then(function(body){\n                                var json = JSON.parse(body);\n\n                                var li = document.createElement('li');\n                                li.classList.add()\n                                var a = document.createElement('a');\n                                var title = json.replacements[0].content[0].replace('<title>','').replace('</title>','')\n                                a.appendChild(document.createTextNode(title));\n                                a.href = request.url;\n                                li.appendChild(a);\n\n                                if(newRequest.headers){\n                                    var isodate = request.headers.get('X-Ghost-Worker-Cache-Date');\n                                    var time = document.createElement('time');\n                                    time.setAttribute('datetime',isodate);\n                                    var formatted = moment(isodate).format('Do MMMM YYYY - hh:mm:ss')\n\n                                    time.appendChild(document.createTextNode(formatted));\n                                    li.appendChild(document.createTextNode(' '));\n                                    li.appendChild(time);\n                                }\n\n                                ul.appendChild(li);\n                            });\n                        }else{\n\n                        }\n                    });\n            })\n        });\n    })\n}\n\nexport default listContent"],"names":["listContent","selector","cacheName","ul","document","querySelector","open","then","cache","keys","forEach","request","index","array","newRequest","clone","caches","match","response","clonedResponse","text","body","json","JSON","parse","li","createElement","classList","add","a","title","replacements","content","replace","appendChild","createTextNode","href","url","headers","isodate","get","time","setAttribute","formatted","moment","format"],"mappings":";;;;;;AACA;;;;;;;AAQA,SAASA,WAAT,CAAsBC,QAAtB,EAAgCC,SAAhC,EAA2C;QACnCC,KAAKC,SAASC,aAAT,CAAuBJ,QAAvB,CAAT;WACOK,IAAP,CAAYJ,SAAZ,EAAuBK,IAAvB,CAA4B,UAASC,KAAT,EAAgB;cAClCC,IAAN,GAAaF,IAAb,CAAkB,UAASE,IAAT,EAAe;iBACxBC,OAAL,CAAa,UAASC,OAAT,EAAkBC,KAAlB,EAAyBC,KAAzB,EAAgC;;oBAErCC,aAAaH,QAAQI,KAAR,EAAjB;uBACOC,MAAP,CAAcC,KAAd,CAAoBH,UAApB,EACKP,IADL,CACU,UAASW,QAAT,EAAmB;wBAClBA,QAAH,EAAY;4BACJC,iBAAiBD,SAASH,KAAT,EAArB;uCACeK,IAAf,GAAsBb,IAAtB,CAA2B,UAASc,IAAT,EAAc;gCACjCC,OAAOC,KAAKC,KAAL,CAAWH,IAAX,CAAX;;gCAEII,KAAKrB,SAASsB,aAAT,CAAuB,IAAvB,CAAT;+BACGC,SAAH,CAAaC,GAAb;gCACIC,IAAIzB,SAASsB,aAAT,CAAuB,GAAvB,CAAR;gCACII,QAAQR,KAAKS,YAAL,CAAkB,CAAlB,EAAqBC,OAArB,CAA6B,CAA7B,EAAgCC,OAAhC,CAAwC,SAAxC,EAAkD,EAAlD,EAAsDA,OAAtD,CAA8D,UAA9D,EAAyE,EAAzE,CAAZ;8BACEC,WAAF,CAAc9B,SAAS+B,cAAT,CAAwBL,KAAxB,CAAd;8BACEM,IAAF,GAASzB,QAAQ0B,GAAjB;+BACGH,WAAH,CAAeL,CAAf;;gCAEGf,WAAWwB,OAAd,EAAsB;oCACdC,UAAU5B,QAAQ2B,OAAR,CAAgBE,GAAhB,CAAoB,2BAApB,CAAd;oCACIC,OAAOrC,SAASsB,aAAT,CAAuB,MAAvB,CAAX;qCACKgB,YAAL,CAAkB,UAAlB,EAA6BH,OAA7B;oCACII,YAAYC,OAAOL,OAAP,EAAgBM,MAAhB,CAAuB,yBAAvB,CAAhB;;qCAEKX,WAAL,CAAiB9B,SAAS+B,cAAT,CAAwBQ,SAAxB,CAAjB;mCACGT,WAAH,CAAe9B,SAAS+B,cAAT,CAAwB,GAAxB,CAAf;mCACGD,WAAH,CAAeO,IAAf;;;+BAGDP,WAAH,CAAeT,EAAf;yBAtBJ;qBAFJ,MA0BK;iBA5Bb;aAHJ;SADJ;KADJ;CA0CJ;;;;"}